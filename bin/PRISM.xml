<doc>
   <assembly>PRISM.dll</assembly>
   <members>
      <member name="T:PRISM.DataBase.clsDBTools"><summary>Tools to manipulates the database.</summary></member>
      <member name="F:PRISM.DataBase.clsDBTools.m_logger"></member>
      <member name="F:PRISM.DataBase.clsDBTools.m_connection_str"></member>
      <member name="F:PRISM.DataBase.clsDBTools.m_DBCn"></member>
      <member name="F:PRISM.DataBase.clsDBTools.m_error_list"></member>
      <member name="M:PRISM.DataBase.clsDBTools.#ctor(PRISM.Logging.ILogger,System.String)"><summary>Initializes a new instance of the clsDBTools class which logs to the specified logger.</summary><param name="logger">This is the logger.</param><param name="ConnectStr">This is a connection string.</param></member>
      <member name="P:PRISM.DataBase.clsDBTools.ConnectStr"><summary> The property sets and gets a connection string. </summary></member>
      <member name="M:PRISM.DataBase.clsDBTools.OpenConnection"><summary> The function opens a database connection. </summary><return>The function returns a boolean that shows if the connection was opened.</return></member>
      <member name="M:PRISM.DataBase.clsDBTools.CLoseConnection"><summary> The subroutine closes the database connection. </summary></member>
      <member name="M:PRISM.DataBase.clsDBTools.LogErrorEvents"><summary> The subroutine logs the error events. </summary></member>
      <member name="M:PRISM.DataBase.clsDBTools.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)"><summary> The subroutine is an event handeler for InfoMessage event. </summary><remarks> The errors and warnings sent from the SQL server are caught here </remarks></member>
      <member name="M:PRISM.DataBase.clsDBTools.GetDiscDataSet(System.String,System.Data.DataSet@,System.Int32@)"><summary> The function gets a disconnected dataset as specified by the SQL statement. </summary><param name="SQL">A SQL string.</param><param name="DS">A dataset.</param><param name="RowCount">A row counter.</param><return>Returns a disconnected dataset as specified by the SQL statement.</return></member>
      <member name="M:PRISM.DataBase.clsDBTools.UpdateDatabase(System.String,System.Int32@)"><summary> The function updates a database table as specified in the SQL statement. </summary><param name="SQL">A SQL string.</param><param name="AffectedRows">Affected Rows to be updated.</param><return>Returns Boolean shwoing if the database was updated.</return></member>
      <member name="T:PRISM.Processes.clsProgRunner"><summary> This class runs a single program as an external process and monitors it with an internal thread. </summary></member>
      <member name="E:PRISM.Processes.clsProgRunner.ProgChanged"><summary> This event is raised whenever the state property changes. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_state"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_Process"><summary> Used to start and monitor the external program. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_pid"><summary> The process id of the currently running incarnation of the external program. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_Thread"><summary> The internal thread used to run the monitoring code. </summary><remarks> That starts and monitors the external program </remarks></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_doCleanup"><summary> Flag that tells internal thread to quit monitoring external program and exit. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_monitorInterval"><summary> The interval for monitoring thread to wake up and check m_doCleanup. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_ExitCode"><summary> Exit code returned by completed process. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_name"><summary> Parameters for external program. </summary></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_ProgName"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_ProgArgs"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_progmark"></member>
      <member name="F:PRISM.Processes.clsProgRunner.kNoRun"></member>
      <member name="F:PRISM.Processes.clsProgRunner.kRunOnce"></member>
      <member name="F:PRISM.Processes.clsProgRunner.kRepeat"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_repeat"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_holdOffTime"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_WorkDir"></member>
      <member name="F:PRISM.Processes.clsProgRunner.m_CreateNoWindow"></member>
      <member name="P:PRISM.Processes.clsProgRunner.MonitoringInterval"><summary> How often (milliseconds) internal monitoring thread checks status of external program </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.StateName"><summary> Current state of prog runner (as descriptive name). </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.PID"><summary> Process id of currently running external program's process. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.State"><summary> Current state of prog runner (as number). </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.Repeat"><summary> Whether prog runner will restart external program after it exits. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.ProgMark"><summary> This value is used by external mark and sweep algorythms. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.RepeatHoldOffTime"><summary> Time (seconds) that prog runner waits to restart external program after it exits. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.Name"><summary> Name of this progrunner. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.Program"><summary> External program that prog runner will run. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.Arguments"><summary> Arguments supplied to external program when it is run. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.ExitCode"><summary> Exit code when process completes. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.WorkDir"><summary> Working directory for process execution. </summary></member>
      <member name="P:PRISM.Processes.clsProgRunner.CreateNoWindow"><summary> Determine if window should be displayed. </summary></member>
      <member name="M:PRISM.Processes.clsProgRunner.Start"><summary> Start program as external process and monitor its state. </summary></member>
      <member name="M:PRISM.Processes.clsProgRunner.StartAndMonitorProgram"><summary> Creates a new thread and starts code that runs and monitors a program in it. </summary></member>
      <member name="M:PRISM.Processes.clsProgRunner.StopMonitoringProgram(System.Boolean)"><summary> Causes monitoring thread to exit on its next monitoring cycle. </summary></member>
      <member name="M:PRISM.Processes.clsProgRunner.#ctor"><summary> Initializes a new instance of the clsProgRunner class. </summary></member>
      <member name="T:PRISM.Files.DirectoryScanner"><summary>Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.</summary></member>
      <member name="E:PRISM.Files.DirectoryScanner.FoundFile"><summary>Event is raised whenever a matching file is found.</summary><remarks>This event is most useful for implementing a progress indicator.</remarks><param name="fileName">The found file's full path.</param></member>
      <member name="F:PRISM.Files.DirectoryScanner.searchDirs"></member>
      <member name="F:PRISM.Files.DirectoryScanner.al"></member>
      <member name="M:PRISM.Files.DirectoryScanner.#ctor(System.String[])"><summary>Initializes a new instance of the DirectoryScanner class.</summary><param name="dirs">An array of directory paths to scan.</param></member>
      <member name="M:PRISM.Files.DirectoryScanner.PerformScan(System.Collections.ArrayList@,System.String[])"><summary>Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.</summary><param name="results">An array of file paths found.</param><param name="dirs">An array of regular expressions to use in the search.</param><returns>Always return true.</returns></member>
      <member name="M:PRISM.Files.DirectoryScanner.RecursiveFileSearch(System.String,System.String)"></member>
      <member name="T:PRISM.Files.clsFileTools"><summary>Tools to manipulate paths and directories.</summary><remarks></remarks></member>
      <member name="E:PRISM.Files.clsFileTools.CopyingFile"><summary>Event is raised before copying begins.</summary><param name="filename">The file's full path.</param></member>
      <member name="F:PRISM.Files.clsFileTools.TERM_ADD"></member>
      <member name="F:PRISM.Files.clsFileTools.TERM_REMOVE"></member>
      <member name="F:PRISM.Files.clsFileTools.TERMCHAR_DOS"></member>
      <member name="F:PRISM.Files.clsFileTools.TERMCHAR_UNIX"></member>
      <member name="F:PRISM.Files.clsFileTools.COPY_OVERWRITE"></member>
      <member name="F:PRISM.Files.clsFileTools.COPY_NO_OVERWRITE"></member>
      <member name="F:PRISM.Files.clsFileTools.TERMINATOR_ADD"><summary>Used to add the path seperation character to the end of the directory path.</summary></member>
      <member name="F:PRISM.Files.clsFileTools.TERMINATOR_REMOVE"><summary>Used to remove the path seperation character from the end of the directory path.</summary></member>
      <member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.Boolean,System.String)"><summary>Modifies input directory path string depending on optional settings.</summary><param name="InpFolder">The input directory path.</param><param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param><param name="TermChar">The specified directory seperation character.</param><returns>The modified directory path.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.Boolean)"><summary>Adds or removes the DOS path seperation character from the end of the directory path.</summary><param name="InpFolder">The input directory path.</param><param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param><returns>The modified directory path.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String,System.String)"><summary>Assures the directory path ends with the specified path seperation character.</summary><param name="InpFolder">The input directory path.</param><param name="TermChar">The specified directory seperation character.</param><returns>The modified directory path.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.CheckTerminator(System.String)"><summary>Assures the directory path ends with the DOS path seperation character.</summary><param name="InpFolder">The input directory path.</param><returns>The modified directory path.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.CheckTerminatorEX(System.String,System.Boolean,System.String)"><summary>Modifies input directory path string depending on optional settings.</summary><param name="InpFolder">The input directory path.</param><param name="AddTerm">Specifies whether the directory path string ends with the specified directory seperation character.</param><param name="TermChar">The specified directory seperation character.</param><returns>The modified directory path.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.CopyFile(System.String,System.String)"><summary>Copies a source file to the destination file. Does not allow overwriting.</summary><param name="SourcePath">The source file path.</param><param name="DestPath">The destination file path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyFile(System.String,System.String,System.Boolean)"><summary>Copies a source file to the destination file. Allows overwriting.</summary><param name="SourcePath">The source file path.</param><param name="DestPath">The destination file path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyFileEx(System.String,System.String,System.Boolean)"><summary>Copies a source file to the destination file. Allows overwriting.</summary><remarks></remarks><param name="SourcePath">The source file path.</param><param name="DestPath">The destination file path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String)"><summary>Copies a source directory to the destination directory. Does not allow overwriting.</summary><param name="SourcePath">The source directory path.</param><param name="DestPath">The destination directory path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean)"><summary>Copies a source directory to the destination directory. Allows overwriting.</summary><param name="SourcePath">The source directory path.</param><param name="DestPath">The destination directory path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)"><summary>Copies a source directory to the destination directory. Allows overwriting.</summary><param name="SourcePath">The source directory path.</param><param name="DestPath">The destination directory path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param><param name="bReadOnly">The value to be assgned to the read-only attribute of the destination file.</param></member>
      <member name="M:PRISM.Files.clsFileTools.CopyDirectoryEx(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"><summary>Copies a source directory to the destination directory. Allows overwriting.</summary><remarks>The last parameter specifies whether the files already present in the </remarks><param name="SourcePath">The source directory path.</param><param name="DestPath">The destination directory path.</param><param name="Overwrite">true if the destination file can be overwritten; otherwise, false.</param><param name="SetAttribute">true if the read-only attribute of the destination file is to be modified, false otherwise.</param><param name="bReadOnly">The value to be assgned to the read-only attribute of the destination file.</param></member>
      <member name="M:PRISM.Files.clsFileTools.GetDirectorySize(System.String)"><summary>Get the directory size.</summary><param name="DirPath">The path to the directory.</param><returns>The directory size.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.GetDirectorySize(System.String,System.Int64@,System.Int64@)"><summary>Get the directory size, file count, and directory count for the entire directory tree.</summary><param name="DirPath">The path to the directory.</param><param name="FileCount">The number of files in the entire directory tree.</param><param name="SubDirCount">The number of directories in the entire directory tree.</param><returns>The directory size.</returns></member>
      <member name="M:PRISM.Files.clsFileTools.GetDirectorySizeEX(System.String,System.Int64@,System.Int64@)"><summary>Get the directory size, file count, and directory count for the entire directory tree.</summary><param name="DirPath">The path to the directory.</param><param name="FileCount">The number of files in the entire directory tree.</param><param name="SubDirCount">The number of directories in the entire directory tree.</param><returns>The directory size.</returns></member>
      <member name="T:PRISM.Files.IniItemTypeEnum"></member>
      <member name="F:PRISM.Files.IniItemTypeEnum.GetKeys"></member>
      <member name="F:PRISM.Files.IniItemTypeEnum.GetValues"></member>
      <member name="F:PRISM.Files.IniItemTypeEnum.GetKeysAndValues"></member>
      <member name="T:PRISM.Files.IniFileReaderNotInitializedException"></member>
      <member name="P:PRISM.Files.IniFileReaderNotInitializedException.Message"></member>
      <member name="T:PRISM.Files.IniFileReader"><summary>Tools to manipulates INI files.</summary></member>
      <member name="F:PRISM.Files.IniFileReader.m_IniFilename"></member>
      <member name="F:PRISM.Files.IniFileReader.m_XmlDoc"></member>
      <member name="F:PRISM.Files.IniFileReader.unattachedComments"></member>
      <member name="F:PRISM.Files.IniFileReader.sections"></member>
      <member name="F:PRISM.Files.IniFileReader.m_CaseSensitive"></member>
      <member name="F:PRISM.Files.IniFileReader.m_SaveFilename"></member>
      <member name="F:PRISM.Files.IniFileReader.m_initialized"></member>
      <member name="F:PRISM.Files.IniFileReader.m_ExceptionLogger"></member>
      <member name="F:PRISM.Files.IniFileReader.m_EventLogger"></member>
      <member name="F:PRISM.Files.IniFileReader.m_NotifyOnEvent"></member>
      <member name="F:PRISM.Files.IniFileReader.m_NotifyOnException"></member>
      <member name="E:PRISM.Files.IniFileReader.InformationMessage"></member>
      <member name="M:PRISM.Files.IniFileReader.#ctor(System.String,PRISM.Logging.ILogger@)"><summary>Initializes a new instance of the IniFileReader.</summary><param name="IniFileName">The name of the ini file.</param><param name="logger">This is the logger.</param></member>
      <member name="M:PRISM.Files.IniFileReader.#ctor(System.String,System.Boolean)"><summary>Initializes a new instance of the IniFileReader.</summary><param name="IniFileName">The name of the ini file.</param><param name="IsCaseSensitive">Case sensitive as boolean.</param></member>
      <member name="M:PRISM.Files.IniFileReader.#ctor(System.String,PRISM.Logging.ILogger@,System.Boolean)"><summary>Initializes a new instance of the IniFileReader.</summary><param name="IniFileName">The name of the ini file.</param><param name="logger">This is the logger.</param><param name="IsCaseSensitive">Case sensitive as boolean.</param></member>
      <member name="M:PRISM.Files.IniFileReader.#ctor(System.String)"><summary>Initializes a new instance of the IniFileReader.</summary><param name="IniFileName">The name of the ini file.</param></member>
      <member name="M:PRISM.Files.IniFileReader.InitIniFileReader(System.String,System.Boolean)"><summary> This routine is called by each of the constructors to make the actual assignments. </summary></member>
      <member name="P:PRISM.Files.IniFileReader.IniFilename"><summary> This routine returns the name of the ini file. </summary><return>The function returns the name of ini file.</return></member>
      <member name="P:PRISM.Files.IniFileReader.Initialized"><summary> This routine returns a boolean showing if the file was initialized or not. </summary><return>The function returns a Boolean.</return></member>
      <member name="P:PRISM.Files.IniFileReader.CaseSensitive"><summary> This routine returns a boolean showing if the name is case sensitive or not. </summary><return>The function returns a Boolean.</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetNameCase(System.String)"><summary> This routine sets a name. </summary><param name="aName">The name to be set.</param><return>The function returns a string.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetRoot"><summary> TBD. </summary></member>
      <member name="M:PRISM.Files.IniFileReader.GetLastSection"><summary> The function gets the last section. </summary><return>The function returns the last section as XmlElement.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetSection(System.String)"><summary> The function gets a section as XmlElement. </summary><param name="sectionName">The name of a section.</param><return>The function returns a section as XmlElement.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetItem(System.String,System.String)"><summary> The function gets an item. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><return>The function returns a XML element.</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetIniSection(System.String,System.String)"><summary> The function sets the ini section name. </summary><param name="oldSection">The name of the old ini section name.</param><param name="newSection">The new name for the ini section.</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetIniValue(System.String,System.String,System.String)"><summary> The function sets a new value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.IniFileReader.DeleteSection(System.String)"><summary> The function deletes a section in the file. </summary><param name="sectionName">The name of the section.</param><return>The function returns a boolean that shows if the delete was completed.</return></member>
      <member name="M:PRISM.Files.IniFileReader.DeleteItem(System.String,System.String)"><summary> The function deletes a item in a specific section. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><return>The function returns a boolean that shows if the delete was completed.</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetIniKey(System.String,System.String,System.String)"><summary> The function sets a new value for the "key" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "key".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetIniValue(System.String,System.String)"><summary> The function gets the name of the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><return>The function returns the name of the "value" attribute.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetIniComments(System.String)"><summary> The function gets the comments for a section name. </summary><param name="sectionName">The name of the section.</param><return>The function returns a string collection with comments</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetIniComments(System.String,System.Collections.Specialized.StringCollection)"><summary> The function sets a the comments for a section name. </summary><param name="sectionName">The name of the section.</param><param name="comments">A string collection.</param><return>The function returns a Boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.IniFileReader.UpdateSections"><summary> The subroutine updades the sections. </summary></member>
      <member name="P:PRISM.Files.IniFileReader.AllSections"><summary> The subroutine gets the sections. </summary><return>The subroutine returns a strin collection of sections.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetItemsInSection(System.String,PRISM.Files.IniItemTypeEnum)"><summary> The function gets a collection of items for a section name. </summary><param name="sectionName">The name of the section.</param><param name="itemType">Item type.</param><return>The function returns a string colection of items in a section.</return></member>
      <member name="M:PRISM.Files.IniFileReader.AllKeysInSection(System.String)"><summary>The funtions gets a collection of keys in a section.</summary><param name="sectionName">The name of the section.</param><return>The function returns a string colection of all the keys in a section.</return></member>
      <member name="M:PRISM.Files.IniFileReader.AllValuesInSection(System.String)"><summary>The funtions gets a collection of values in a section.</summary><param name="sectionName">The name of the section.</param><return>The function returns a string colection of all the values in a section.</return></member>
      <member name="M:PRISM.Files.IniFileReader.AllItemsInSection(System.String)"><summary>The funtions gets a collection of items in a section.</summary><param name="sectionName">The name of the section.</param><return>The function returns a string colection of all the items in a section.</return></member>
      <member name="M:PRISM.Files.IniFileReader.GetCustomIniAttribute(System.String,System.String,System.String)"><summary>The funtions gets a custom attribute name.</summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="attributeName">The name of the attribute.</param><return>The function returns a string.</return></member>
      <member name="M:PRISM.Files.IniFileReader.SetCustomIniAttribute(System.String,System.String,System.String,System.String)"><summary>The funtions sets a custom attribute name.</summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="attributeName">The name of the attribute.</param><param name="attributeValue">The value of the attribute.</param><return>The function returns a Boolean.</return></member>
      <member name="M:PRISM.Files.IniFileReader.CreateSection(System.String)"><summary>The funtions creates a section name.</summary><param name="sectionName">The name of the section to be created.</param><return>The function returns a Boolean.</return></member>
      <member name="M:PRISM.Files.IniFileReader.CreateItem(System.String,System.String,System.String)"><summary>The funtions creates a section name.</summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value to be created.</param><return>The function returns a Boolean.</return></member>
      <member name="M:PRISM.Files.IniFileReader.ParseLineXml(System.String,System.Xml.XmlDocument)"><summary>It parses a string and adds atribbutes to the XMLDocument.</summary><param name="s">The name of the string to be parse.</param><param name="doc">The name of the XmlDocument.</param></member>
      <member name="P:PRISM.Files.IniFileReader.OutputFilename"><summary>It Sets or Gets the output file name.</summary></member>
      <member name="M:PRISM.Files.IniFileReader.Save"><summary>It saves the data to the Xml output file.</summary></member>
      <member name="M:PRISM.Files.IniFileReader.AsIniFile"><summary>It transforms a XML file to an INI file.</summary><return>The function returns document formatted as a string.</return></member>
      <member name="P:PRISM.Files.IniFileReader.XmlDoc"><summary>It gets the XmlDocument.</summary></member>
      <member name="P:PRISM.Files.IniFileReader.XML"><summary>Converts an XML document to a string.</summary><return>It returns the XML document formatted as a string.</return></member>
      <member name="M:PRISM.Files.IniFileReader.RegisterExceptionLogger(PRISM.Logging.ILogger)"><summary>Sets the name of the exception logger</summary></member>
      <member name="M:PRISM.Files.IniFileReader.RegisterEventLogger(PRISM.Logging.ILogger)"><summary>Sets the name of the event logger</summary></member>
      <member name="P:PRISM.Files.IniFileReader.NotifyOnEvent"><summary>Gets or Sets notify on event.</summary></member>
      <member name="P:PRISM.Files.IniFileReader.NotifyOnException"><summary>Gets or Sets notify on exception.</summary></member>
      <member name="T:PRISM.Logging.ILogger"><summary>Defines the logging interface.</summary></member>
      <member name="T:PRISM.Logging.ILogger.logMsgType"><summary>The type of log message.</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logNormal"><summary>The message is informational.</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logError"><summary>The message represents an error.</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logWarning"><summary>The message represents a warning.</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logDebug"><summary>The message is only for debugging purposes.</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logNA"><summary>The mesaage does not apply (to what?).</summary></member>
      <member name="F:PRISM.Logging.ILogger.logMsgType.logHealth"><summary>The message is an indicator of (in)correct operation.</summary></member>
      <member name="M:PRISM.Logging.ILogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)"><summary>Posts a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="M:PRISM.Logging.ILogger.PostError(System.String,System.Exception,System.Boolean)"><summary>Posts an error to the log.</summary><param name="message">The message to post.</param><param name="ex">The exception associated with the error.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="T:PRISM.Logging.ILoggerAware"><summary>Defines the logging aware interface.</summary><remarks>This interface is used by any class that wants to optionally support  logging to a logger that implements the ILogger interface.  The key here is the phrase optionally.  The class allows, but does not require the class user to supply an ILogger.  If the Logger is not way.  If an ILogger is specified, the user has the option of just logging, or logging and throwing/raising Exceptions/Events in the usual way as well.</remarks></member>
      <member name="M:PRISM.Logging.ILoggerAware.RegisterExceptionLogger(PRISM.Logging.ILogger)"><summary>TBD.</summary><param name="filePath">The name of the file to use for the log.</param></member>
      <member name="M:PRISM.Logging.ILoggerAware.RegisterEventLogger(PRISM.Logging.ILogger)"><summary>TBD.</summary><param name="filePath">The name of the file to use for the log.</param></member>
      <member name="P:PRISM.Logging.ILoggerAware.NotifyOnEvent"><summary>TBD.</summary></member>
      <member name="P:PRISM.Logging.ILoggerAware.NotifyOnException"><summary>TBD.</summary></member>
      <member name="T:PRISM.Logging.clsFileLogger"><summary>Provides logging to a local file.</summary><remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks></member>
      <member name="F:PRISM.Logging.clsFileLogger.m_logFileName"></member>
      <member name="F:PRISM.Logging.clsFileLogger.m_programName"></member>
      <member name="F:PRISM.Logging.clsFileLogger.m_programVersion"></member>
      <member name="M:PRISM.Logging.clsFileLogger.#ctor"><summary>Initializes a new instance of the clsFileLogger class.</summary></member>
      <member name="M:PRISM.Logging.clsFileLogger.#ctor(System.String)"><summary>Initializes a new instance of the clsFileLogger class which logs to the specified file.</summary><param name="filePath">The name of the file to use for the log.</param><remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks></member>
      <member name="P:PRISM.Logging.clsFileLogger.ExecutableVersion"><summary>Gets the product version associated with this application.</summary></member>
      <member name="P:PRISM.Logging.clsFileLogger.ExecutableName"><summary>Gets the name of the executable file that started the application.</summary></member>
      <member name="P:PRISM.Logging.clsFileLogger.LogFilePath"><summary>The name of the file being used as the log.</summary><remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks></member>
      <member name="M:PRISM.Logging.clsFileLogger.LogToFile(System.String,PRISM.Logging.ILogger.logMsgType)"><summary>Writes a message to the log file.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsFileLogger.TypeToString(PRISM.Logging.ILogger.logMsgType)"><summary>Converts enumerated error type to string for logging output.</summary><param name="MyErrType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsFileLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)"><summary>Posts a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="M:PRISM.Logging.clsFileLogger.PostError(System.String,System.Exception,System.Boolean)"><summary>Posts an error to the log.</summary><param name="message">The message to post.</param><param name="ex">The exception associated with the error.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="T:PRISM.Logging.clsDBLogger"><summary>Provides logging to a database and local file.</summary><remarks>The module name identifies the logging process, but if not specified, it is filled in as ExecutableName:ExecutableVersion:MachineName:UserName.</remarks></member>
      <member name="F:PRISM.Logging.clsDBLogger.m_connection_str"></member>
      <member name="F:PRISM.Logging.clsDBLogger.m_error_list"></member>
      <member name="F:PRISM.Logging.clsDBLogger.m_moduleName"></member>
      <member name="M:PRISM.Logging.clsDBLogger.#ctor"><summary>Initializes a new instance of the clsDBLogger class.</summary></member>
      <member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String)"><summary>Initializes a new instance of the clsDBLogger class which logs to the specified database.</summary><param name="connectionStr">The connection string used to access the database.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String,System.String)"><summary>Initializes a new instance of the clsDBLogger class which logs to the specified database and file.</summary><param name="connectionStr">The connection string used to access the database.</param><param name="filePath">The name of the file to use for the log.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.#ctor(System.String,System.String,System.String)"><summary>Initializes a new instance of the clsDBLogger class which logs to the specified database and file.</summary><param name="modName">The string used to identify the posting process.</param><param name="connectionStr">The connection string used to access the database.</param><param name="filePath">The name of the file to use for the log.</param><remarks>The module name identifies the logging process, but if not specified, it is filled in as ExecutableName:ExecutableVersion:MachineName:UserName.</remarks></member>
      <member name="P:PRISM.Logging.clsDBLogger.ConnectionString"><summary>The connection string used to access the database.</summary></member>
      <member name="P:PRISM.Logging.clsDBLogger.MachineName"><summary>The module name identifies the logging process.</summary></member>
      <member name="P:PRISM.Logging.clsDBLogger.UserName"><summary>The module name identifies the logging process.</summary></member>
      <member name="M:PRISM.Logging.clsDBLogger.ConstructModuleName"><summary>COnstruct the string ExecutableName:ExecutableVersion:MachineName:UserName.</summary></member>
      <member name="P:PRISM.Logging.clsDBLogger.ModuleName"><summary>The module name identifies the logging process.</summary><remarks>If the module name is not specified, it is filled in as ExecutableName:ExecutableVersion:MachineName:UserName.</remarks></member>
      <member name="M:PRISM.Logging.clsDBLogger.LogToDB(System.String,PRISM.Logging.ILogger.logMsgType)"><summary>Writes a message to the log table.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)"><summary>Posts a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.PostError(System.String,System.Exception,System.Boolean)"><summary>Posts an error to the log.</summary><param name="message">The message to post.</param><param name="ex">The exception associated with the error.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.PostLogEntry(System.String,System.String)"><summary>Writes a message to the log table via the stored procedure.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsDBLogger.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)"><summary>Event handler for InfoMessage event.</summary><remarks>Errors and warnings sent from the SQL Server database engine are caught here.</remarks></member>
      <member name="T:PRISM.Logging.clsQueLogger"><summary>Wraps a queuing mechanism around any object that implements ILogger interface.</summary><remarks>The posting member functions of this class put the log entry onto the end of an internal queue and return very quickly to the caller. A separate thread within the class is used to perform the actual output of the log entries using the logging object that is specified in the constructor for this class.</remarks></member>
      <member name="T:PRISM.Logging.clsQueLogger.clsLogEntry"><summary>A class to hold a log entry in the internal queue.</summary><remarks>It holds the three arguments to PostEntry.</remarks></member>
      <member name="F:PRISM.Logging.clsQueLogger.clsLogEntry.message"></member>
      <member name="F:PRISM.Logging.clsQueLogger.clsLogEntry.entryType"></member>
      <member name="F:PRISM.Logging.clsQueLogger.clsLogEntry.localOnly"></member>
      <member name="F:PRISM.Logging.clsQueLogger.m_queue"></member>
      <member name="F:PRISM.Logging.clsQueLogger.m_Thread"></member>
      <member name="F:PRISM.Logging.clsQueLogger.m_threadRunning"></member>
      <member name="F:PRISM.Logging.clsQueLogger.m_ThreadStart"></member>
      <member name="F:PRISM.Logging.clsQueLogger.m_logger"></member>
      <member name="M:PRISM.Logging.clsQueLogger.#ctor(PRISM.Logging.ILogger)"><summary>Initializes a new instance of the clsQueLogger class which logs to the ILogger.</summary><param name="logger">The target logger object.</param></member>
      <member name="M:PRISM.Logging.clsQueLogger.KickTheOutputThread"><summary>Start the log output thread if it isn't already running.</summary></member>
      <member name="M:PRISM.Logging.clsQueLogger.LogFromQueue"><summary>Pull all entries from the queue and output them to the log streams.</summary></member>
      <member name="M:PRISM.Logging.clsQueLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)"><summary>Writes a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsQueLogger.PostError(System.String,System.Exception,System.Boolean)"><summary>Posts a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="T:PRISM.Logging.clsControlLogger"><summary>Provides logging to a control.</summary><remarks>The actual log control can be a textbox, listbox and a listview.</remarks></member>
      <member name="F:PRISM.Logging.clsControlLogger.m_loglsBoxCtl"></member>
      <member name="F:PRISM.Logging.clsControlLogger.m_loglsViewCtl"></member>
      <member name="F:PRISM.Logging.clsControlLogger.m_logtxtBoxCtl"></member>
      <member name="F:PRISM.Logging.clsControlLogger.m_programName"></member>
      <member name="F:PRISM.Logging.clsControlLogger.m_programVersion"></member>
      <member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.ListBox)"><summary>Initializes a new instance of the clsFileLogger class which logs to a listbox.</summary><param name="filePath">The name of the listbox used to lof message.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.ListView)"><summary>Initializes a new instance of the clsFileLogger class which logs to a listview.</summary><param name="filePath">The name of the lisrview used to lof message.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.#ctor(System.Windows.Forms.TextBoxBase)"><summary>Initializes a new instance of the clsFileLogger class which logs to a textbox.</summary><param name="filePath">The name of the textbox used to lof message.</param></member>
      <member name="P:PRISM.Logging.clsControlLogger.ExecutableVersion"><summary>Gets the product version associated with this application.</summary></member>
      <member name="P:PRISM.Logging.clsControlLogger.ExecutableName"><summary>Gets the name of the executable file that started the application.</summary></member>
      <member name="P:PRISM.Logging.clsControlLogger.LogListBox"><summary>Gets and Sets the name of the listbox control.</summary></member>
      <member name="P:PRISM.Logging.clsControlLogger.LogListView"><summary>Gets and Sets the name of the listview control.</summary></member>
      <member name="P:PRISM.Logging.clsControlLogger.LogTextBoxBase"><summary>Gets and Sets the name of the TextBoxBase control.</summary></member>
      <member name="M:PRISM.Logging.clsControlLogger.LogToControl(System.String,PRISM.Logging.ILogger.logMsgType)"><summary>Posts a message.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.PostEntryTextBox(System.String)"><summary>Posts a message to the textbox control.</summary><param name="message">The message to post.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.PostEntryListBox(System.String)"><summary>Posts a message to the listbox control.</summary><param name="message">The message to post.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.PostEntryListview(System.String,PRISM.Logging.ILogger.logMsgType)"><summary>Posts a message to the listview control.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.TypeToString(PRISM.Logging.ILogger.logMsgType)"><summary>Converts enumerated error type to string for logging output.</summary><param name="MyErrType">The ILogger error type.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.PostEntry(System.String,PRISM.Logging.ILogger.logMsgType,System.Boolean)"><summary>Posts a message to the log.</summary><param name="message">The message to post.</param><param name="EntryType">The ILogger error type.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="M:PRISM.Logging.clsControlLogger.PostError(System.String,System.Exception,System.Boolean)"><summary>Posts an error to the log.</summary><param name="message">The message to post.</param><param name="ex">The exception associated with the error.</param><param name="localOnly">Post message locally only.</param></member>
      <member name="T:PRISM.Files.ShareConnector"><summary>Connects to a file share using a password and user name. </summary><remarks> The default behaviour when connecting to SMB/CIFS file shares is for This class allows you to connect to SMB/CIFS file shares when the use of SSPI isn't availabe and/or when you don't wish to use the default behaviour. It's quite comparable to the "Connect using a different user name." option in the Map Network Drive utility in Windows.  Much of this code came from Microsoft Knowledge Base Article - 173011.  It was then modified to fit our needs. </remarks></member>
      <member name="F:PRISM.Files.ShareConnector.errMessage"></member>
      <member name="T:PRISM.Files.ShareConnector.NETRESOURCE"><summary>This structure is used to group a bunch of member variables.</summary></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.dwScope"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.dwType"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.dwDisplayType"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.dwUsage"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.lpLocalName"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.lpRemoteName"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.lpComment"></member>
      <member name="F:PRISM.Files.ShareConnector.NETRESOURCE.lpProvider"></member>
      <member name="F:PRISM.Files.ShareConnector.NO_ERROR"></member>
      <member name="F:PRISM.Files.ShareConnector.CONNECT_UPDATE_PROFILE"></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCE_CONNECTED"><summary> Constant that may be used by NETRESOURCE-&gt;dwScope </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCE_GLOBALNET"><summary> Constant that may be used by NETRESOURCE-&gt;dwScope </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_DISK"><summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_PRINT"><summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCETYPE_ANY"><summary> Constant that may be used by NETRESOURCE-&gt;dwType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_DOMAIN"><summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_GENERIC"><summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_SERVER"><summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEDISPLAYTYPE_SHARE"><summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEUSAGE_CONNECTABLE"><summary> Constant that may be used by NETRESOURCE-&gt;dwDisplayType </summary></member>
      <member name="F:PRISM.Files.ShareConnector.RESOURCEUSAGE_CONTAINER"><summary> Constant that may be used by NETRESOURCE-&gt;dwUsage </summary></member>
      <member name="F:PRISM.Files.ShareConnector.netR"></member>
      <member name="F:PRISM.Files.ShareConnector.user"></member>
      <member name="F:PRISM.Files.ShareConnector.pwd"></member>
      <member name="F:PRISM.Files.ShareConnector.sharename"></member>
      <member name="M:PRISM.Files.ShareConnector.#ctor(System.String,System.String)"><summary> This version of the constructor requires you to specify the sharename by setting the <see cref="P:PRISM.Files.ShareConnector.Share">Share</see> property. </summary></member>
      <member name="M:PRISM.Files.ShareConnector.#ctor(System.String,System.String,System.String)"><summary> This version of the constructor allows you to specify the sharename as an  argument. </summary></member>
      <member name="M:PRISM.Files.ShareConnector.RealNew(System.String,System.String)"><summary> This routine is called by each of the constructors to make the actual assignments in a consistent fashion. </summary></member>
      <member name="P:PRISM.Files.ShareConnector.Share"><summary> Sets the name of the file share to which you will connect. </summary></member>
      <member name="M:PRISM.Files.ShareConnector.Connect(System.String)"><summary> Connects to specified share using account/password specified through the constructor and  the file share name passed as an argument. </summary><param name="Share">The name of the file share to which you will connect.</param></member>
      <member name="M:PRISM.Files.ShareConnector.Connect"><summary> Connects to specified share using account/password specified through the constructor. Requires you to have specifyed the sharename by setting the <see cref="P:PRISM.Files.ShareConnector.Share">Share</see> property. </summary></member>
      <member name="M:PRISM.Files.ShareConnector.RealConnect"><summary> Connects to specified share using account/password specified previously. This is the function that actually does the connection based on the setup  from the <see cref="M:PRISM.Files.ShareConnector.Connect">Connect</see> functions. </summary></member>
      <member name="M:PRISM.Files.ShareConnector.Disconnect"><summary> Disconnects the files share. </summary></member>
      <member name="P:PRISM.Files.ShareConnector.ErrorMessage"><summary> Gets the error message returned by the <see cref="M:PRISM.Files.ShareConnector.Connect">Connect</see> and <see cref="M:PRISM.Files.ShareConnector.Disconnect">Disconnect</see> functions. </summary></member>
      <member name="T:PRISM.Files.XmlSettingsFileAccessor"></member>
      <member name="T:PRISM.Files.XmlSettingsFileAccessor.udtRecentSectionType"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.udtRecentSectionType.SectionName"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.udtRecentSectionType.htKeys"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.m_IniFilePath"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.m_iniFileAccessor"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.mCaseSensitive"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.htSectionNames"></member>
      <member name="F:PRISM.Files.XmlSettingsFileAccessor.mCachedSection"></member>
      <member name="E:PRISM.Files.XmlSettingsFileAccessor.InformationMessage"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings"><summary> Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive (and are thus all lowercase). </summary><return>The function returns a boolean that shows if the file was successfully loaded.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String)"><summary> Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive (and are thus all lowercase). </summary><param name="XmlSettingsFilePath">The path to the XML settings file.</param><return>The function returns a boolean that shows if the file was successfully loaded.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,System.Boolean)"><summary> Loads the settings for the defined Xml Settings File </summary><param name="XmlSettingsFilePath">The path to the XML settings file.</param><param name="IsCaseSensitive">Case sensitive names if True.  All names must be lowercase if false.</param><return>The function returns a boolean that shows if the file was successfully loaded.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,PRISM.Logging.ILogger@)"><summary> Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive (and are thus all lowercase). </summary><param name="XmlSettingsFilePath">The path to the XML settings file.</param><param name="logger">This is the logger.</param></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.LoadSettings(System.String,PRISM.Logging.ILogger@,System.Boolean)"><summary> Loads the settings for the defined Xml Settings File </summary><param name="XmlSettingsFilePath">The path to the XML settings file.</param><param name="logger">This is the logger.</param><param name="IsCaseSensitive">Case sensitive names if True.  All names must be lowercase if false.</param></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SaveSettings"><summary> Saves the settings for the defined Xml Settings File.  Note that you must call LoadSettings to initialize the class prior to setting any values. </summary><return>The function returns a boolean that shows if the file was successfully saved.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SectionPresent(System.String)"><summary>Checks if a section is present in the settings file.</summary><param name="sectionName">The name of the section to look for.</param><return>The function returns a boolean that shows if the section is present.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.CacheKeyNames(System.String)"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.CacheSectionNames"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetCachedKeyName(System.String,System.String)"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetCachedSectionName(System.String)"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetNameCase(System.String)"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as a String.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns boolean True if the "value" attribute is "true".  Otherwise, returns boolean False.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as a Short.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as an Integer.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as a Long.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as a Single.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double,System.Boolean@)"><summary> The function gets the name of the "value" attribute in section "sectionName". </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param><param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param><return>The function returns the name of the "value" attribute as a Double.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetIniFilePath(System.String)"><summary> The function sets the path to the Xml Settings File. </summary><param name="XmlSettingsFilePath">The path to the XML settings file.</param></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.String)"><summary> The function sets a new String value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Boolean)"><summary> The function sets a new Boolean value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int16)"><summary> The function sets a new Short value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int32)"><summary> The function sets a new Integer value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int64)"><summary> The function sets a new Long value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Single)"><summary> The function sets a new Single value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Double)"><summary> The function sets a new Double value for the "value" attribute. </summary><param name="sectionName">The name of the section.</param><param name="keyName">The name of the key.</param><param name="newValue">The new value for the "value".</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.RenameSection(System.String,System.String)"><summary> The function renames a section. </summary><param name="oldSection">The name of the old ini section name.</param><param name="newSection">The new name for the ini section.</param><return>The function returns a boolean that shows if the change was done.</return></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.FileAccessorInfoMessageEvent(System.String)"></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.RegisterExceptionLogger(PRISM.Logging.ILogger)"><summary>Sets the name of the exception logger</summary></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.RegisterEventLogger(PRISM.Logging.ILogger)"><summary>Sets the name of the event logger</summary></member>
      <member name="P:PRISM.Files.XmlSettingsFileAccessor.NotifyOnEvent"><summary>Gets or Sets notify on event.</summary></member>
      <member name="P:PRISM.Files.XmlSettingsFileAccessor.NotifyOnException"><summary>Gets or Sets notify on exception.</summary></member>
      <member name="M:PRISM.Files.XmlSettingsFileAccessor.#ctor"></member>
      <member name="T:PRISM.Files.ZipTools"><summary>Makes using a file archiving program easier.</summary><remarks>There are a routines to create an archive, extract files from an existing archive,</remarks></member>
      <member name="F:PRISM.Files.ZipTools.m_WorkDir"></member>
      <member name="F:PRISM.Files.ZipTools.m_ZipFilePath"></member>
      <member name="F:PRISM.Files.ZipTools.m_WaitInterval"></member>
      <member name="M:PRISM.Files.ZipTools.MakeZipFile(System.String,System.String,System.String)"><summary>Create a zip file.</summary><param name="CmdOptions">The zip program command line arguments.</param><param name="OutputFile">The file path of the output zip file.</param><param name="InputSpec">The files and/or directorys to archive.</param></member>
      <member name="M:PRISM.Files.ZipTools.UnzipFile(System.String,System.String,System.String)"><summary>Extract files from a zip file.</summary><param name="CmdOptions">The zip program command line arguments.</param><param name="InputFile">The file path of the zip file from which to extract files.</param><param name="OutPath">The path where you want to put the extracted files.</param></member>
      <member name="P:PRISM.Files.ZipTools.WorkDir"><summary>The working directory for the zipping process.</summary></member>
      <member name="P:PRISM.Files.ZipTools.ZipFilePath"><summary>The path to the zipping program.</summary></member>
      <member name="M:PRISM.Files.ZipTools.#ctor(System.String,System.String)"><summary>Initializes a new instance of the ZipTools class.</summary><param name="WorkDir">The working directory for the zipping process.</param><param name="ZipFilePath">The path to the zipping program.</param></member>
      <member name="M:PRISM.Files.ZipTools.VerifyParams"><summary>Verifies initial parameters have been set prior to performing operation.</summary></member>
      <member name="M:PRISM.Files.ZipTools.VerifyZippedFile(System.String)"><summary>Verifies the integrity of a zip file.</summary><param name="InputFile">The file path of the zip file to verify.</param></member>
   </members>
</doc>