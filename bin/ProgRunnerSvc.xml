<?xml version="1.0"?>
<doc>
<assembly>
<name>
ProgRunnerSvc
</name>
</assembly>
<members>
<member name="T:ProgRunnerSvc.clsLogTools">
 <summary>
 Class for handling logging via Log4Net
 </summary>
 <remarks>
 Call method CreateFileLogger to define the log file name
 </remarks>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LOG_FILE_DATECODE">
 <summary>
 Date format for log file names
 </summary>
</member>
<member name="T:ProgRunnerSvc.clsLogTools.LogLevels">
 <summary>
 Log levels
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LogLevels.DEBUG">
 <summary>
 Debug message
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LogLevels.INFO">
 <summary>
 Informational message
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LogLevels.WARN">
 <summary>
 Warning message
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LogLevels.ERROR">
 <summary>
 Error message
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LogLevels.FATAL">
 <summary>
 Fatal error message
 </summary>
</member>
<member name="T:ProgRunnerSvc.clsLogTools.LoggerTypes">
 <summary>
 Log types
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LoggerTypes.LogFile">
 <summary>
 Log to a log file
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LoggerTypes.LogDb">
 <summary>
 Log to the database and to the log file
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.LoggerTypes.LogSystem">
 <summary>
 Log to the system event log and to the log file
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.m_FileLogger">
 <summary>
 File Logger (RollingFileAppender)
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.m_DbLogger">
 <summary>
 Database logger
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.m_SysLogger">
 <summary>
 System event log logger
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsLogTools.m_BaseFileName">
 <summary>
 Base log file name
 </summary>
 <remarks>This is updated by ChangeLogFileBaseName or CreateFileLogger</remarks>
</member>
<member name="P:ProgRunnerSvc.clsLogTools.CurrentFileAppenderPath">
 <summary>
 File path for the current log file used by the FileAppender
 </summary>
 <returns>Log file path</returns>
</member>
<member name="P:ProgRunnerSvc.clsLogTools.FileLogDebugEnabled">
 <summary>
 Tells calling program file debug status
 </summary>
 <returns>TRUE if debug level enabled for file logger; FALSE otherwise</returns>
 <remarks></remarks>
</member>
<member name="P:ProgRunnerSvc.clsLogTools.MostRecentErrorMessage">
 <summary>
 Most recent error message
 </summary>
 <returns></returns>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.#ctor">
 <summary>
 Empty, private constructor to prevent instantiation
 </summary>
 <remarks>
 To simulate a static class in VB.NET, we use the NotInheritable keyword and include a private constructor
 </remarks>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.WriteLog(ProgRunnerSvc.clsLogTools.LoggerTypes,ProgRunnerSvc.clsLogTools.LogLevels,System.String)">
 <summary>
 Write a message to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.WriteLog(ProgRunnerSvc.clsLogTools.LoggerTypes,ProgRunnerSvc.clsLogTools.LogLevels,System.String,System.Exception)">
 <summary>
 Write a message and exception to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
 <param name="ex">Exception to be logged</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.WriteLogWork(ProgRunnerSvc.clsLogTools.LoggerTypes,ProgRunnerSvc.clsLogTools.LogLevels,System.String,System.Exception)">
 <summary>
 Write a message and possibly an exception to the logging system
 </summary>
 <param name="loggerType">Type of logger to use</param>
 <param name="logLevel">Level of log reporting</param>
 <param name="message">Message to be logged</param>
 <param name="ex">Exception to be logged</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.ChangeLogFileBaseName(System.String)">
 <summary>
 Update the log file's base name
 </summary>
 <param name="baseName"></param>
 <remarks>Will append today's date to the base name</remarks>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.ChangeLogFileName">
 <summary>
  Changes the base log file name
 </summary>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.ChangeLogFileName(System.String)">
 <summary>
 Changes the base log file name
 </summary>
 <param name="relativeFilePath">Log file base name and path (relative to program folder)</param>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.FindAppenders(System.String)">
 <summary>
 Gets the specified appender
 </summary>
 <param name="appenderName">Name of appender to find</param>
 <returns>List(IAppender) objects if found; NOTHING otherwise</returns>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.SetFileLogLevel(System.Int32)">
 <summary>
 Sets the file logging level via an integer value (Overloaded)
 </summary>
 <param name="logLevel">Integer corresponding to level (1-5, 5 being most verbose</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.SetFileLogLevel(ProgRunnerSvc.clsLogTools.LogLevels)">
 <summary>
 Sets file logging level based on enumeration (Overloaded)
 </summary>
 <param name="logLevel">LogLevels value defining level (Debug is most verbose)</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.ArchiveOldLogs(System.String)">
 <summary>
 Look for log files over 32 days old that can be moved into a subdirectory
 </summary>
 <param name="logFilePath"></param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateFileAppender(System.String)">
 <summary>
 Creates a file appender
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <returns>A configured file appender</returns>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateFileLogger(System.String,System.Int32)">
 <summary>
 Configures the file logger
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <param name="logLevel">Debug level for file logger (1-5, 5 being most verbose)</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateFileLogger(System.String,ProgRunnerSvc.clsLogTools.LogLevels)">
 <summary>
 Configures the file logger
 </summary>
 <param name="logFileNameBase">Base name for log file</param>
 <param name="logLevel">Debug level for file logger </param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateDbLogger(System.String,System.String)">
 <summary>
 Configures the database logger
 </summary>
 <param name="connStr">Database connection string</param>
 <param name="moduleName">Module name used by logger</param>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateDbAppender(System.String,System.String,System.String)">
 <summary>
 Creates a database appender
 </summary>
 <param name="connectionString">Database connection string</param>
 <param name="moduleName">Module name used by logger</param>
 <param name="appenderName">Appender name</param>
 <returns>ADONet database appender</returns>
</member>
<member name="M:ProgRunnerSvc.clsLogTools.CreateLayout(System.String)">
 <summary>
 Creates a layout object for a Db appender parameter
 </summary>
 <param name="layoutStr">Name of parameter</param>
 <returns></returns>
</member>
<member name="T:ProgRunnerSvc.clsLogTools.MessageLoggedEventHandler">
 <summary>
 Delegate for event MessageLogged
 </summary>
</member>
<member name="E:ProgRunnerSvc.clsLogTools.MessageLogged">
 <summary>
 This event is raised when a message is logged
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsMainProg.m_ProgRunners">
 <summary>
 Keys are the program name; values are the ProcessRunner object
 </summary>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsMainProg.#ctor">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:ProgRunnerSvc.clsMainProg.GetProcesses(System.String)">
 <summary>
 If the XML reader tries to read a file that is being updated, an error can occur
 This function only has Try/Catch blocks when reading specific entries within a section
 The calling function is expected to catch and handle other errors
 </summary>
 <param name="strIniFilePath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ProgRunnerSvc.clsProcessRunner">
 <summary>
 This class runs a single program as an external process and monitors it with an internal thread.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ProgRunnerSvc.clsProcessRunner.eThreadState">
 <summary>
 Thread states.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.ThreadState">
 <summary>
 Overall state of this object
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_Process">
 <summary>
 Used to start and monitor the external program.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_pid">
 <summary>
 The process id of the currently running incarnation of the external program.
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_Thread">
 <summary>
 The internal thread used to run the monitoring code. That starts and monitors the external program.
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_ThreadStopCommand">
 <summary>
 Flag that tells internal thread to quit monitoring external program and exit.
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_monitorInterval">
 <summary>
 The interval (in milliseconds) for monitoring thread to wake up and check m_doCleanup.
 </summary>
</member>
<member name="F:ProgRunnerSvc.clsProcessRunner.m_ExitCode">
 <summary>
 Exit code returned by completed process.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.KeyName">
 <summary>
 Key name for this program (unique across all programs registered to run)
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.ProgramPath">
 <summary>
 Path to the program (.exe) to run
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.ProgramArguments">
 <summary>
 Arguments to pass to the program
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.RepeatMode">
 <summary>
 Repeat mode, valid values are Repeat, Once, and No
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.Holdoff">
 <summary>
 Holdoff time, in seconds (not milliseconds)
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.MonitoringInterval">
 <summary>
 How often (milliseconds) internal monitoring thread checks status of external program.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.PID">
 <summary>
 Process id of currently running external program's process.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.State">
 <summary>
 Current state of prog runner (as number).
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.ExitCode">
 <summary>
 Exit code when process completes.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.WorkDir">
 <summary>
 Working directory for process execution.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.CreateNoWindow">
 <summary>
 Determine if window should be displayed.
 </summary>
</member>
<member name="P:ProgRunnerSvc.clsProcessRunner.WindowStyle">
 <summary>
 Window style to use when CreateNoWindow is False.
 </summary>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.#ctor(ProgRunnerSvc.clsProcessSettings)">
 <summary>
 Instantiate new process runner instance
 </summary>
 <param name="processSettings">Process settings</param>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.#ctor(ProgRunnerSvc.clsProcessSettings,System.String)">
 <summary>
 Instantiate new process runner instance
 </summary>
 <param name="processSettings">Process settings</param>
 <param name="workingDirectory">Working directory path</param>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.#ctor(ProgRunnerSvc.clsProcessSettings,System.String,System.Boolean)">
 <summary>
 Instantiate new process runner instance
 </summary>
 <param name="processSettings">Process settings</param>
 <param name="workingDirectory">Working directory path</param>
 <param name="bCreateNoWindow">True to create no window, false to use a normal window</param>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.#ctor(ProgRunnerSvc.clsProcessSettings,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
 <summary>
 Instantiate new process runner instance
 </summary>
 <param name="processSettings">Process settings</param>
 <param name="workingDirectory">Working directory path</param>
 <param name="eWindowStyle">Window style</param>
 <param name="bCreateNoWindow">True to create no window, false to use windowStyle</param>
 <remarks></remarks>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.UpdateProcessParameters(ProgRunnerSvc.clsProcessSettings)">
 <summary>
 Update settings for existing prog runner instance
 </summary>
 <param name="newProgramInfo">New program info</param>
 <remarks>Key name is ignored in newProgramInfo</remarks>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.StartThread">
 <summary>
 Creates a new thread and starts code that runs and monitors a program in it.
 </summary>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.StopThread">
 <summary>
 Causes monitoring thread to exit on its next monitoring cycle.
 </summary>
</member>
<member name="M:ProgRunnerSvc.clsProcessRunner.ProcessThread">
 <summary>
 Start program as external process and monitor its state.
 </summary>
</member>
</members>
</doc>
